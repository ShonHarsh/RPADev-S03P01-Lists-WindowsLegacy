<Activity mc:Ignorable="sap sap2010" x:Class="Main" sap2010:ExpressionActivityEditor.ExpressionActivityEditor="C#" sap:VirtualizedContainerService.HintSize="755,1499" sap2010:WorkflowViewState.IdRef="ActivityBuilder_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=mscorlib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Windows.Presentation</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Sort the List and Print 3 Values&#xA;&#xA;Given an input list of countries please sort the list and print the first 3 values in descending order.&#xA;&#xA;Note: Please use this value for the List initialization: new List(of String) from {&quot;Germany&quot;, &quot;Spain&quot;, &quot;Japan&quot;, &quot;Brazil&quot;, &quot;India&quot;, &quot;China&quot;}.&#xA;&#xA;The list type is: System.Collections.Generic.List&lt;T&gt; with type = String" sap:VirtualizedContainerService.HintSize="765,1474" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:List(x:String)" Name="inputData">
        <Variable.Default>
          <mca:CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_15">new List&lt;String&gt; {"Pakistan", "Micronesia", "Japan", "Mauritania", "Eswatini", "Liberia", "Antigua And Barbuda", "Burundi", "Ghana", "Greece", "Moldova", "Angola", "Nigeria", "Dominica", "Jamaica", "Malawi", "Turkey", "Canada", "Egypt", "Tuvalu", "Austrian Empire", "Belize", "Nicaragua", "Ukraine", "Hungary", "Trinidad And Tobago", "Venezuela", "Uzbekistan", "Bahrain", "Norway", "Indonesia", "Mozambique", "Georgia", "Holy See", "Republic Of The Congo", "Malta", "Denmark", "France", "Syria", "Cabo Verde", "Timor-leste", "Lesotho", "Armenia", "Lebanon", "Montenegro", "Mongolia", "Sudan", "Israel", "Vietnam", "Democratic Republic Of The Congo", "Andorra", "Benin", "India", "Paraguay", "Belarus", "Jordan", "Tajikistan", "Mexico", "Brazil", "Burma", "Qatar", "Italy", "The United Arab Emirates", "Iran", "Barbados", "Ethiopia", "Oman", "Bosnia And Herzegovina", "Serbia", "Croatia", "Bangladesh", "Switzerland", "Guinea-bissau", "Albania", "Libya", "Romania", "Uganda", "Turkmenistan", "Panama", "The Cayman Islands", "Korea", "Tunisia", "Guatemala", "Spain", "Thailand", "Senegal", "New Zealand", "Russia", "Algeria", "Chile", "Colombia", "Guinea", "Ireland", "Namibia", "Papua New Guinea", "Cambodia", "Portugal", "Kazakhstan", "Marshall Islands", "Burkina Faso", "Sierra Leone", "Zimbabwe", "Saint Lucia", "Lithuania", "South Africa", "South Sudan", "Liechtenstein", "Kiribati", "Botswana", "Mauritius", "Tanzania", "Czechia", "Belgium", "Yemen", "Brunswick And Lüneburg", "Iceland", "Poland", "Sao Tome And Principe", "Zambia", "Madagascar", "Estonia", "Guyana", "Ecuador", "El Salvador", "Malaysia", "Grenada", "Cyprus", "The United States Of America", "Tonga", "North Macedonia", "Peru", "Cote D’ivoire", "Uruguay", "The Gambia", "Afghanistan", "Kuwait", "Niger", "Sri Lanka", "Saint Vincent And The Grenadines", "The Solomon Islands", "Dominican Republic", "Gabon", "Finland", "Kenya", "Maldives", "Fiji", "Saint Kitts And Nevis", "Azerbaijan", "Chad", "Djibouti", "Philippines", "Eritrea", "Brunei", "Slovakia", "Sweden", "Rwanda", "Australia", "Costa Rica", "Iraq", "Kosovo", "Honduras", "Somalia", "Republic Of Korea", "Kyrgyzstan", "Palau", "Togo", "Suriname", "Luxembourg", "China", "The United Kingdom", "Laos", "Samoa", "The Congo Free State", "San Marino", "Cameroon", "Singapore", "The Netherlands", "Cuba", "Nauru", "Austria", "Mali", "Seychelles", "Slovenia", "Czechoslovakia", "Morocco", "Monaco", "Bolivia", "Saudi Arabia", "Nepal", "Germany", "Latvia", "Comoros", "Haiti", "Argentina", "Equatorial Guinea", "Vanuatu", "Central African Republic", "The Bahamas", "Bulgaria"}</mca:CSharpValue>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:Boolean" Name="printFirstThree" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <InvokeMethod sap2010:Annotation.AnnotationText="The important item to note here is the activity: Invoke Method." DisplayName="InvokeMethod - List Sort" sap:VirtualizedContainerService.HintSize="703,178" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Sort">
      <InvokeMethod.TargetObject>
        <InArgument x:TypeArguments="scg:List(x:String)">
          <mca:CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2">inputData</mca:CSharpValue>
        </InArgument>
      </InvokeMethod.TargetObject>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </InvokeMethod>
    <InvokeMethod DisplayName="InvokeMethod - List Reverse" sap:VirtualizedContainerService.HintSize="703,134" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="Reverse">
      <InvokeMethod.TargetObject>
        <InArgument x:TypeArguments="scg:List(x:String)">
          <mca:CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_4">inputData</mca:CSharpValue>
        </InArgument>
      </InvokeMethod.TargetObject>
    </InvokeMethod>
    <Assign sap2010:Annotation.AnnotationText="Adding a variable to switch between printing the first three entries versus printing the entire list." sap:VirtualizedContainerService.HintSize="703,117" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Boolean">
          <mca:CSharpReference x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">printFirstThree</mca:CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <If sap2010:Annotation.AnnotationText="Opted for a 3 or all scenario for print options.  A different approadch would be to create and set a variable, such as printNumber, for the '3' value instead of the printFirstThree.  Thus the target would be inputData.GetRange(0, printNumber)." DisplayName="If PrintFirstThree" sap:VirtualizedContainerService.HintSize="703,721" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_16">printFirstThree</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Sequence FirstThree" sap:VirtualizedContainerService.HintSize="350,521" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap2010:Annotation.AnnotationText="Set the inputData list to the first three entries, zero index." DisplayName="Assign Trim InputData" sap:VirtualizedContainerService.HintSize="308,102" sap2010:WorkflowViewState.IdRef="Assign_3">
            <Assign.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">
                <mca:CSharpReference x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpReference`1_6">inputData</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">
                <mca:CSharpValue x:TypeArguments="scg:List(x:String)" sap2010:WorkflowViewState.IdRef="CSharpValue`1_32">inputData.GetRange(0, 3)</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
          <ui:ForEach x:TypeArguments="x:Object" CurrentIndex="{x:Null}" DisplayName="For Each First Three Countries" sap:VirtualizedContainerService.HintSize="308,287" sap2010:WorkflowViewState.IdRef="ForEach`1_2">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:Object">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:Object" Name="item" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Body ForEach" sap:VirtualizedContainerService.HintSize="272,153" sap2010:WorkflowViewState.IdRef="Sequence_3">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <WriteLine DisplayName="Write Line Country" sap:VirtualizedContainerService.HintSize="230,61" sap2010:WorkflowViewState.IdRef="WriteLine_5">
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_30">item.ToString()</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <ui:ForEach.Values>
              <InArgument x:TypeArguments="sc:IEnumerable">
                <mca:CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_31">inputData</mca:CSharpValue>
              </InArgument>
            </ui:ForEach.Values>
          </ui:ForEach>
        </Sequence>
      </If.Then>
      <If.Else>
        <ui:ForEach x:TypeArguments="x:Object" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="Many additional countries were added to the inputData in the declaration." DisplayName="For Each All Countries" sap:VirtualizedContainerService.HintSize="308,329" sap2010:WorkflowViewState.IdRef="ForEach`1_1">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="x:Object">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:Object" Name="item" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Body ForEach Countries" sap:VirtualizedContainerService.HintSize="272,153" sap2010:WorkflowViewState.IdRef="Sequence_2">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <WriteLine DisplayName="Write Line Country" sap:VirtualizedContainerService.HintSize="230,61" sap2010:WorkflowViewState.IdRef="WriteLine_2">
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_14">item.ToString()</mca:CSharpValue>
                  </InArgument>
                </WriteLine>
              </Sequence>
            </ActivityAction>
          </ui:ForEach.Body>
          <ui:ForEach.Values>
            <InArgument x:TypeArguments="sc:IEnumerable">
              <mca:CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_10">inputData</mca:CSharpValue>
            </InArgument>
          </ui:ForEach.Values>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ForEach>
      </If.Else>
    </If>
  </Sequence>
</Activity>